-- local MUC_NS = "http://jabber.org/protocol/muc";
local jid = require "util.jid";
local formdecode = require "util.http".formdecode;
-- local sha256 = require "util.hashes".sha256;

local function verify_token(session, stanza, room)
	-- local user_jid = stanza.attr.from;
	local expTime = 1200;
	log("info", "checking i am into verify_token");
	log("info", "checking verify_token: PASSWORD: %s -> TOKEN: %s", tostring(session.password), tostring(session.token));
	local raw = room.."|"..session.password.."|"..expTime; 
	log("info", "checking i am into verify_token raw: %s", raw);
--	local decoded = sha256(raw);
-- 	log("info", "checking decoded: %s", tostring(decoded) );
--	 if decoded ~= token then
-- 	return nil;
-- 	end
--	room:set_affiliation(true, user_jid, nil);
	return true;
end


-- module:hook("muc-room-pre-create", function(event)
--	local origin, room, stanza = event.origin, event.room, event.stanza;
--	log("info", "checking pre create: %s %s", tostring(origin), tostring(stanza));
--	log("info", "checking pre join: testvar: %s", tostring(origin.testvar));
--	log("info", "checking pre create: PASSWORD: %s -> TOKEN: %s", tostring(origin.password), tostring(origin.token));
--	return verify_token( origin, stanza, room);
--end);


module:hook("muc-occupant-pre-join", function (event)

	local room, stanza, origin = event.room, event.stanza, event.origin;
	local user, domain, res = jid.split(event.stanza.attr.from);

	log("info", "checking token: %s", tostring(origin.token));	
	log("info", "checking pre join: PASSWORD: %s -> TOKEN: %s", tostring(origin.password), tostring(origin.token));
	log("info", "checking pre join: testvar: %s", tostring(origin.testvar));
	log("info", "--------------> user %s domain %s res %s ", tostring(user),tostring(domain),tostring(res));
	
	return verify_token(origin, stanza, room);

	--if room:get_password() == nil then
	--	room:get_password('hello');
	--end;

	-- if  tostring( room:get_password() ) == 'hello' then
	 -- local join = stanza:get_child("x", MUC_NS);
	 -- join:tag("password", { xmlns = MUC_NS }):text(room:get_password());
	--end;
end);


-- Extract 'token' param from URL when session is created
function init_session(event)
    log("info", "init session");
    local session, request = event.session, event.request;
    local query = request.url.query;

    if query ~= nil then
        local params = formdecode(query);
	
		log("info", "checking init session: PASSWORD: %s -> TOKEN: %s", tostring(params.password), tostring(params.token));
		session.token = query and params.token or nil;
		session.password = query and params.password or nil;
		session.testvar = 'asd';
		log("info", "checking init session: session PASSWORD: %s -> TOKEN: %s", tostring(session.password), tostring(session.token));
        -- previd is used together with https://modules.prosody.im/mod_smacks.html
        -- the param is used to find resumed session and re-use anonymous(random) user id
        -- (see get_username_from_token)
        session.previd = query and params.previd or nil;

        -- The room name and optional prefix from the bosh query
        session.jitsi_bosh_query_room = params.room;
        session.jitsi_bosh_query_prefix = params.prefix or "";
    end
end

module:hook_global("bosh-session", init_session);